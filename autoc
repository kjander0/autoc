#!/bin/python3

import sys

# <statement> = <assignment> |
#               <expression>

def parse_statement(state):
    while state.src[state.offset].isspace():
        state.offset += 1

    # if we find an identifier then it must be an assignment
    identifier = peek_identifier(state)
    if identifier is not None:
        ass = parse_assignment(state)
    else:
        expr = parse_expression(state)
    check_error(state)

def peek_identifier(state):
    start_offset = state.offset 
    ident = parse_identifier(state)
    state.error = None
    state.offset = start_offset

def parse_identifier(state):
    end_offset = state.offset
    while state.src[end_offset].isalnum():
        end_offset += 1
    if state.offset == end_offset:
        state.error = "expected identiier"
    ident = state.src[state.offset:end_offset]
    state.offset = end_offset
    return ident

def parse_expression(state):
    pass

def check_error(state):
    if state.error is None:
        return
    print(state.error, file=sys.stderr)
    sys.exit(1)

class State:
    pass
import pdb;pdb.set_trace()
state = State()
state.offset = 0
state.src = \
'''

a = 2

'''
parse_statement(state)
